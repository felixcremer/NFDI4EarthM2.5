---
title: "Introduction to handling raster time series in Julia, Python and R"
subtitle: ""
date: 2022-12-15
author: 
  - name: Felix Cremer
    affiliations:
    - ref: mpibgc
  - Hannes Dr√∂se
  - Yomna Eid
  - Fabian Gans
  - Sibylle Hassler 
  - Edzer Pebesma 
affiliations:
- id: mpibgc
  name: Max-Planck Institute for Biogeochemistry
  city: Jena
format:
  html: default
  pdf:
    pdf-engine: xelatex
toc: true
number-sections: true
documentclass: article
jupyter: julia-1.9
filters:
  - code-visibility
---

# Introduction

This tutorial will showcase how to work with raster data efficiently. 

In this tutorial we are going to use the COSMO REA reanalyis near surface air temperature data. The data is an reanalysis dataset on a 6km by 6km grid. We are going to use the monthly average values, but the data is also avialable with an hourly or daily temporal resolution.

The analysis will be shown in Julia, Python and R to showcase the similarities and differences in handling raster data in these ecosystems.

# Time series analysis 

## Loading of necessary packages

First we load the relevant packages in the different languages for working with raster and vector data and also the packages for plotting.


::: {.panel-tabset}
## Julia
```{julia}
using YAXArrays # This package is for handling large raster data 
using NetCDF # This package is for opening NetCDF files 
using GLMakie # Plotting package with a focus on interactivity
using DimensionalData # Package to handle named and labeled arrays
using Rasters
using Downloads: download # Standard Library to handle downloads to get the data
using Glob: glob
using NCDatasets
using GeoInterface: GeoInterface as GI # Package for handling Geospatial data
using GADM # Package for loading state borders
```

## R 
```{julia}
#| output: false

using RCall #| hide_line
R""" #| hide_line
library("rnaturalearth")
library("rnaturalearthdata")
library( "sf")
library( "raster")
library("stars")
library("lubridate")
""" #| hide_line
```

## Python

```{julia}
using PythonCall #| hide_line
@pyexec """ #| hide_line
import rioxarray
import xarray as xr
""" #|hide_line
```

:::

Now we download the airtemperature data for 1995 to the `data/` folder.
In the first part of the tutorial we are going to only use the data from one single year, and later on we are going to combine the datasets from different years together. The data will only be downloaded if it is not yet available on the local computer. 


::: {.panel-tabset}
## Julia



```{julia}
url = "http://esgf1.dkrz.de/thredds/fileServer/cosmo-rea/reanalysis/EUR-6km/DWD/ECMWF-ERAINT/REA6/r1i1p1f1/COSMO/v1/mon/atmos/tas/v20230314/tas_EUR-6km_ECMWF-ERAINT_REA6_r1i1p1f1_COSMO_v1_mon_199601-199612.nc"
filename = split(url, "/")[end]
mkpath("data/")
p = joinpath(@__DIR__, "data", filename)
if !isfile(p)
  download(url, p)
end
```

## R

```{julia}
R""" #| hide_line
setwd("data/")
destfile <- getwd()

# URL of DKRZ folder containing COSMO-REA Dataset files
baseurl <- "http://esgf1.dkrz.de/thredds/fileServer/cosmo-rea/reanalysis/EUR-6km/DWD/ECMWF-ERAINT/REA6/r1i1p1f1/COSMO/v1/mon/atmos/tas/v20230314/tas_EUR-6km_ECMWF-ERAINT_REA6_r1i1p1f1_COSMO_v1_mon_"
urlList <- "0"
l1 <- format(seq(as.Date("1995-01-01"), as.Date("2018-01-01"), by="year"), format = "%Y%m")
l2 <- format(seq(as.Date("1995-12-01"), as.Date("2018-12-01"), by="year"), format = "%Y%m")

for (i in 1:length(l1)) {
  x <- paste0(baseurl,l1[i],"-",l2[i],".nc")
# Use the following line to download the data to the destfile folder
#download.file(x, paste0(destfile,"\\", basename(x)), mode = "wb") #download files
  urlList[i] <- x
  i = i + 1
}
urlList
""" #| hide_line
``` 
:::


## Opening the data and first map

Now we are going to open the raster data as a datacube and plot a first overview map.


::: {.panel-tabset}
## Julia


```{julia}
r = Raster(p, key="tas")
# TODO: should we use GeoMakie for plotting?
# TODO: This should work without the set see Rasters # 
r = set(r, :rlat=>Y, :rlon=>X)
# To get an overview we could use
#Rasters.rplot(r)
# Or to plot the data of January separately
heatmap(r[Ti(Near(DateTime(1995,1,15)))])

```

## R 

```{julia}
using RCall #| hide_line
R"""#| hide_line
file = paste0(destfile, "/", basename(urlList[1]))
m = read_mdim(file, "tas", curvilinear = c("longitude", "latitude"))
plot(m[,,,1], downsample = 5, axes = TRUE, reset = FALSE) # downsample to save time
maps::map(add = TRUE)
"" # | hide_line
"""; #| hide_line
```

:::

## Coordinate reference system of the data

The data is in a rotated latitude longitude grid.
This rotation helps to reduce the spatial distortions of the data because of the projection.
For an introduction into the concepts of 
Here we construct a projection string from the metadata of the dataset so that we can use this projection information latter on for converting between different coordinate reference systems. 


::: {.panel-tabset}
## Julia
In Julia we construct a Proj representation of the coordinate reference system so that we can convert the vector data that we are going to use later on for subsetting the dataset into the CRS of the raster data.

```{julia}
ds = open_dataset(p)
olonp = 180 + ds.rotated_latitude_longitude.properties["grid_north_pole_longitude"]
olatp = ds.rotated_latitude_longitude.properties["grid_north_pole_latitude"]

proj = "+proj=ob_tran +o_proj=latlon +o_lon_p=0 +o_lat_p=$olatp +lon_0=$olonp"
```

## R

In R we are warping the raster data from the rotated longitude latitude grid to an unrotated longitude latitude grid.

```{julia}
R""" #| hide_line
if  (isFALSE(file.exists("out2.nc"))) {
  gdal_utils("warp", file, "out2.nc")
}
m2 = read_mdim("out2.nc")                                 # now has time over bands, caused by "warp"
plot(m2, axes = TRUE, reset = FALSE)                      # fast: regular grid
maps::map(add = TRUE)
# Add time dimension and crs to re-gridded dataset
t = st_get_dimension_values(m, "time")
merge(m2, name = "time") |>
  st_set_dimensions("time", values = t) |>
  setNames("tas") -> m3
m3 <- st_set_crs(m3, st_crs(4326))
m3
""" #| hide_line
```

:::

## Restricting to an area of interest

Now we load the polygon data for the border of Germany to restrict our data to the bounding box of Germany.


::: {.panel-tabset}

## Julia
We use the GADM package to load the boundary polygon for Germany.
Then we reproject the polygon to the rotated longitude latitude grid.

```{julia}
using GADM
using ArchGDAL:ArchGDAL as AG
using GLMakie
using GeoInterfaceMakie: GeoInterfaceMakie
GeoInterfaceMakie.@enable AG.AbstractGeometry

deu = GADM.get("DEU")
projdeu = AG.reproject(only(deu.geom), ProjString(AG.toPROJ4(AG.getspatialref(deu.geom[1]))), ProjString(proj))
# Should work like that
#projdeu = AG.reproject(deu, ProjString(proj))
plot!(projdeu)
bbox = GI.extent(projdeu)
rger = r[bbox]
heatmap(rger[Ti(Near(DateTime(1995,1,15)))])
``` 

## R 

```{julia}
R""" #| hide_line#jrn
# Subset for Germany
germany <- ne_countries(type = "countries", country = "Germany", scale = "medium", returnclass = "sf")
rger <- m3[germany]
plot(rger)
""" #| hide_line
```
:::


## Split the time series into two seasons


Now we split the time series data into two datasets by season.

Hereby we define the summer as the time between the spring and autumn equinox. 
Since we are using monthly data in this example, we define summer as April to September.
We can define the winter as every month that is not included in the summer dataset.

::: {.panel-tabset}
## Julia

```{julia}
summer = rger[Ti=Date(1996,4,1)..Date(1996, 10,1)]
winter = rger[Ti=Not(Date(1996, 4,1)..Date(1996,10,1))]

``` 

## R 
```{julia}
R""" #| hide_line
# Split dataset into two by season
# Definition: Summer (April - September) & Winter (October - March)
a = seq(from = 4, to = 288, by = 12)
b = seq(from = 9, to = 288, by = 12)
winter <- rger[,,,4:9]

c = seq(from = 1, to = 288, by = 12)
d = seq(from = 3, to = 288, by = 12)
e = seq(from = 10, to = 288, by = 12)
f = seq(from = 12, to = 288, by = 12)
summer <- c(rger[,,,1:3], rger[,,,10:12])
""" #| hide_line
```
::: 

Now we compute the standard deviation and the mean of the time series for the "summer" and the "winter" dataset.


::: {.panel-tabset}
## Julia

```{julia}
summer = rger[Ti=Date(1996,4,1)..Date(1996, 10,1)]
winter = rger[Ti=Not(Date(1996, 4,1)..Date(1996,10,1))]
using Statistics
summermean = mapslices(mean, summer, dims=Ti)
wintermean = mapslices(mean, winter, dims=Ti)
winterstd = mapslices(std, winter, dims=Ti)
plot(summermean[:,:,1])
``` 

## R 
```{julia}
R""" #| hide_line
summer_mean_tas <- aggregate(summer, by = "year", FUN = mean)
plot(summer_mean_tas)

""" #| hide_line
```
::: 



